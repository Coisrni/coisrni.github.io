{"meta":{"title":"杨乐乐吖","subtitle":null,"description":null,"author":"yanglele","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2019-08-02T04:28:54.000Z","updated":"2019-08-02T04:28:54.037Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-02T04:31:44.000Z","updated":"2019-08-02T04:31:44.122Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"hexo如何搭建专属博客","slug":"hexo如何搭建专属博客","date":"2019-08-02T05:05:28.000Z","updated":"2019-08-02T05:13:59.646Z","comments":true,"path":"2019/08/02/hexo如何搭建专属博客/","link":"","permalink":"http://yoursite.com/2019/08/02/hexo如何搭建专属博客/","excerpt":"文章目录 1. 0x01 本地环境搭建(win7)1.1. git安装 (git官网)1.2. Node.js 安装(Node官网)2. 0x02 安装hexo3. 0x03 主题切换4. 0x04 SSH配置5. 0x05 域名配置6. 0x06 鸣谢 经过几天的折腾，终于配成功了，现记录如下，本人是在win7上搭建个人博客的。","text":"文章目录 1. 0x01 本地环境搭建(win7)1.1. git安装 (git官网)1.2. Node.js 安装(Node官网)2. 0x02 安装hexo3. 0x03 主题切换4. 0x04 SSH配置5. 0x05 域名配置6. 0x06 鸣谢 经过几天的折腾，终于配成功了，现记录如下，本人是在win7上搭建个人博客的。直奔主题，搭建个人博客主要分为以下几步: 本地环境搭建(win7) 安装hexo 主题切换 SSH配置 域名配置 鸣谢 没错就这上面几步，就能使我们拥有自己的博客网站，帅不帅？酷不酷？ 0x01 本地环境搭建(win7) git安装(因为hexo发布是使用git发布的) 安Node.js(因为hexo是基于Node.js)git安装 (git官网) windows 进入官网下载最新版安装(下面本人的版本) 12$ git versiongit version 2.7.2.windows.1 Ubuntu下安装git 参考,猛点这里 Centos下安装git 参考,猛点这里Node.js 安装(Node官网)值得注意的是，node.js的版本必须6.0以上,出现以下信息就证明安装成功了12node -vv6.11.2 0x02 安装hexo在安装hexo之前，先介绍hexo常用的几个命令12345hexo g #完整命令为hexo generate,生成静态文件hexo s #完整命令为hexo server,启动服务器,本地可以测试hexo d #完整命令为hexo deploy,将本地编译好的静态文件发布到github上hexo n #完整命令为hexo new,新建一篇文章hexo clean #清除当前项目的静态文件 输入以下命令安装hexo:1npm install -g hexo 完成后，根据自己的爱好，在硬盘（如：D)上新建一个hexo的目录，然后在该目录依次执行以下命令12hexo initnpm install（用于安装依赖包） 执行完成后，输入以下命令，然后通过访问:http://localhost:4000，来访问，一个本地博客就可以看到了，值得注意的是，默认主题是landscape，如需要变主题，得自己手动修改。12hexo ghexo s 0x03 主题切换本人的主题是 yilia这个主题, hexo-theme-yilia地址,在当前项目页,输入以下命令:1git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 等待完成，然后:12cd themesls -l 会发现多了一个yilia的目录,然后回到上层,使用sublime或者editplus或者其他文本编辑工具，修改hexo目前下的_config.yml,找到theme项,theme后面的内容修改为yilia,如下:12345678910pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: yilia# Deployment## Docs: https://hexo.io/docs/deployment.html#coding: git@git.coding.net:JansZeng/hexoblog.git,master 然后，重新编译，启动：123hexo cleanhexo ghexo s 访问http://localhost:4000,这时看到的页面是不是不一样了?此时，hexo的安装及主题修改已经完成了.是不是很酷? 0x04 SSH配置 登录git 点击new 创建一个项目,填写后面的名字的时候，需要注意，名称必须为 你的github有户名.github.io,这个一定不能出错,然后点击Create repository,这样创建了一个空项目 接下来配置SSH,执行下列命令1ssh-keygen -t rsa -C \"zxxj157391@163.com\" 连续按三次回车，会在 C:\\Users\\Administrator.ssh 有三个文件，打开id_rsa.pub文件，copy文件中的内容 点击Settings 点击 SSH and GPG Keys 点击 New SSH Key 将copy的内容copy到 Key 方框中 点击 Add SSH Key 打开hexo目录下的_config.yml,找到deploy: 12345678# Deployment## Docs: https://hexo.io/docs/deployment.html#coding: git@git.coding.net:JansZeng/hexoblog.git,masterdeploy: type: git #repository: https://github.com:JansZeng/janszeng.github.io.git repo: github: git@github.com:JansZeng/janszeng.github.io.git,master 保存后，重新编译，启动： 123hexo cleanhexo ghexo d 如果出现:1ERROR Deployer not found: git 执行以下命令:1npm install hexo-deployer-git --save 然后在执行:1hexo d 成功话在浏览器输入:http://janszeng.github.io,这样的话，SSH配置完成了 0x05 域名配置 去阿里云购买这自己域名(如： janszeng.top) 进入阿里云后，配置域名解析(域名 –&gt; 解析 –&gt; 添加解析) 在你上述创建的git地址,创建一个名称为CNAME的文件，内容为你购买的域名,如下： 1www.janszeng.top 将工程下载到本地，将CNAME文件拖到hexo\\source目录下, 保存后，重新编译，启动：123hexo cleanhexo ghexo d 0x06 鸣谢 litten hexo-theme-yilia 沸沸腾 的使用github+Hexo人人都能拥有一个美美的博客 嘟嘟独立博客 hexo系列文章 域名的绑定","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"},{"name":"后端","slug":"前端/后端","permalink":"http://yoursite.com/categories/前端/后端/"}],"tags":[],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"},{"name":"后端","slug":"前端/后端","permalink":"http://yoursite.com/categories/前端/后端/"}]},{"title":"温故而知新之Hibernate","slug":"温故而知新之Hibernate","date":"2019-08-01T14:54:25.000Z","updated":"2019-08-02T04:46:05.339Z","comments":true,"path":"2019/08/01/温故而知新之Hibernate/","link":"","permalink":"http://yoursite.com/2019/08/01/温故而知新之Hibernate/","excerpt":"","text":"Test类 testSave.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import java.util.List;import org.hibernate.Criteria;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.Transaction;import org.hibernate.cfg.Configuration;import org.hibernate.criterion.Order;import org.junit.Test;import com.DB.edu.Student;public class testSave &#123; //执行查找，不能忘记在实体类写一个tostring(); //删除或修改，一定要先查再操作****，删除的session.delete()里面放的是对象，所以把那个查询到的对象放到里面，只有查询不需要事务，增删改都要事务 @Test public void testSave()&#123; // 先加载配置文件默认加载src目录下的配置文件,加载特定名称的配置文件 Configuration config=new Configuration().configure(); //1.创建SessionFactory对象,一个数据库只需要一个SessionFactory，创建工具类来实现， 不是轻量级的，它的创建于销毁浪费资源， //2.它是对hibernate的初始化，可以生产SessionFactory 重量级对象 SessionFactory factory = config.buildSessionFactory(); /*相当于数据库的连接池 里面出现错误是看看hibernate.cfg.xml里是否出错，因为它的内容就在&lt;session-factory&gt;中 创建session对象，hibernate一级缓存由session缓存，单线程的对象，线程安全的问题，刷出缓存，更新缓存的数据session.flush, 内部包含session.commit,session.flush能变更的查询，*/ //从工厂中回去session对象，与数据库会话 Session session = factory.openSession(); // 开启事务 Transaction tr = session.beginTransaction(); // 编写保存代码 Student c = new Student(); // 已经自动递增 //c.setId(0); c.setName(\"测试名称\"); c.setAge(110); // 保存客户 //System.out.println(\"手动赋值为：\"+c.getId()); //session.save(c); //session.get(arg0, arg1)arg0__javabean的对象，主键的值 Student s=session.get(Student.class,1); System.out.println(s); //session.delete(c); //System.out.println(\"手动赋值为：\"+c.getId()); // 提交事务 tr.commit(); // 释放资源 session.close(); factory.close(); &#125; /** * 状态 * 瞬时 数据库中没有数据与之对应 超过作用域会被JVM垃圾回收器回收， 持久 托管 */ @Test public void getStudent(Student stu)&#123; Session session=HibernateUtils.openSession(); Transaction tr=session.beginTransaction(); Criteria criteria = session.createCriteria(Student.class); // 设置排序 criteria.addOrder(Order.desc(\"id\")); criteria.setFirstResult(0); criteria.setMaxResults(3); List&lt;Student&gt; list = criteria.list(); for (Student Student : list) &#123; System.out.println(Student); &#125; tr.commit(); session.close(); &#125;&#125; src目录下 hibernate.cfg.xml1234567891011121314151617181920212223242526272829303132333435&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC\"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;&lt;hibernate-configuration&gt;&lt;session-factory&gt;&lt;!-- hibernate可以省略 --&gt;&lt;property name=\"hibernate.connection.driver_class\"&gt;com.mysql.jdbc.Driver&lt;/property&gt;&lt;property name=\"hibernate.connection.url\"&gt;jdbc:mysql://localhost:3306/mydata&lt;/property&gt;&lt;property name=\"hibernate.connection.username\"&gt;root&lt;/property&gt;&lt;property name=\"hibernate.connection.password\"&gt;123456&lt;/property&gt;&lt;property name=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;&lt;!-- 以下为可选配置 --&gt;&lt;!-- 显示sql语句 --&gt;&lt;property name=\"hibernate.show_sql\"&gt;true&lt;/property&gt;&lt;!-- 让sql语句格式化显示 --&gt;&lt;property name=\"hibernate.format_sql\"&gt;true&lt;/property&gt;&lt;!-- 创建映射的表 慎用，否则表中的数据会被删掉，&lt;property name=\"hibernate.hbm2ddl.auto\"&gt;create&lt;/property&gt;--&gt;&lt;!-- 没有表会创建，表不会删除,里面的数据还在，还可以进行字段的更新，在java的实例化对象中，添加它都在数据库中操作 但是不能删除--&gt;&lt;property name=\"hibernate.hbm2ddl.auto\"&gt;update&lt;/property&gt;&lt;!-- 对映射进行校验 --&gt;&lt;property name=\"hibernate.hbm2ddl.auto\"&gt;validate&lt;/property&gt;&lt;!-- 现在的Hibernate框架中，使用session对象开启事务，所以需要来传递session对象，框架提供了ThreadLocal的方式 * 需要在hibernate.cfg.xml的配置文件中提供配置--&gt; &lt;!-- 这句话是为了getCurrentSession做准备 a、如果是本地事务（jdbc事务） &lt;propertyname=\"hibernate.current_session_context_class\"&gt;thread&lt;/property&gt; b、如果是全局事务（jta事务） &lt;propertyname=\"hibernate.current_session_context_class\"&gt;jta&lt;/property&gt; --&gt;&lt;property name=\"hibernate.current_session_context_class\"&gt;thread&lt;/property&gt;&lt;!-- 必须要有的映射路径 ***************************hibernate --&gt;&lt;mapping resource=\"com/DB/edu/Student.hbm.xml\"/&gt;&lt;/session-factory&gt;&lt;/hibernate-configuration&gt; Student.hbm.xml对数据的表的映射 1234567891011121314&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC\"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;!-- multable: 配置是否可更新 动态的更新， 对象为null时均不在updata的语句中 --&gt;&lt;hibernate-mapping package=\"com.DB.edu\"&gt;&lt;class name=\"com.DB.edu.Student\" table=\"student\"&gt; &lt;id name=\"id\" column=\"id\"&gt;&lt;!-- type种类 --&gt;&lt;generator class=\"increment\"/&gt;&lt;!--注意点: 适用类型 （代理主键） 数据类型 数据库的限制 --&gt;&lt;/id&gt;&lt;property name=\"name\" column=\"name\" /&gt;&lt;property name=\"age\" column=\"age\"/&gt;&lt;/class&gt;&lt;/hibernate-mapping&gt; 在hiubernate中常用的两种查询方式参照HQL查询QBC（Query By Criteria）查询原生SQL查询https://blog.csdn.net/weixin_39941298/article/details/81699743TestSelect .java测试类 12345678910111213141516171819202122232425262728293031323334import java.util.List;import org.hibernate.Query;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.cfg.Configuration;import com.DB.edu.Emp;public class TestSelect &#123; public static void main(String[] args) &#123; select(); &#125; public static void select()&#123; // 先加载配置文件 Configuration config = new Configuration().configure(); SessionFactory factory = config.buildSessionFactory(); Session session = factory.openSession(); //Transaction tr=session.beginTransaction(); String hql=\"from Emp where empmoney&gt;?\"; Query query= session.createQuery(hql); query.setInteger(0, 5000); List&lt;Emp&gt; em=query.list(); for(Emp e:em)&#123; System.out.println(e.toString()); &#125; //tr.commit(); session.close(); factory.close(); &#125;&#125;","categories":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"},{"name":"hibernate","slug":"hibernate","permalink":"http://yoursite.com/tags/hibernate/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://yoursite.com/categories/后端/"}]},{"title":"文章","slug":"文章","date":"2019-08-01T14:24:28.000Z","updated":"2019-08-02T04:53:34.283Z","comments":true,"path":"2019/08/01/文章/","link":"","permalink":"http://yoursite.com/2019/08/01/文章/","excerpt":"","text":"#我是一篇文章","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"文章","slug":"文章","permalink":"http://yoursite.com/tags/文章/"},{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-08-01T09:33:27.092Z","updated":"2019-08-01T09:33:27.092Z","comments":true,"path":"2019/08/01/hello-world/","link":"","permalink":"http://yoursite.com/2019/08/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}